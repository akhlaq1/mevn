{"remainingRequest":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/thread-loader/dist/cjs.js!/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/babel-loader/lib/index.js!/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/src/components/forms/TeamProduct.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/src/components/forms/TeamProduct.vue","mtime":1560173403555},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/cache-loader/dist/cjs.js","mtime":1560173719903},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/thread-loader/dist/cjs.js","mtime":1560173721326},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/babel-loader/lib/index.js","mtime":1556985451660},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/cache-loader/dist/cjs.js","mtime":1560173719903},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/vue-loader/lib/index.js","mtime":1560173721357}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport _objectSpread from \"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport api from \"@/services/RestService\";\nimport { mapGetters, mapActions } from \"vuex\";\nexport default {\n  name: \"edit-team-product\",\n  props: ['data', 'modalProps'],\n  computed: _objectSpread({}, mapGetters({\n    team: 'team/activeTeam'\n  })),\n  data: function data() {\n    return {\n      load: false,\n      file: null,\n      form: {}\n    };\n  },\n  methods: _objectSpread({}, mapActions({\n    updateTeam: 'team/updateTeam'\n  }), {\n    submit: function () {\n      var _submit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var that, upload, formData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"submitting\");\n                that = this;\n                that.load = true;\n                upload = null;\n\n                if (!this.file) {\n                  _context.next = 11;\n                  break;\n                }\n\n                formData = new FormData();\n                formData.append(\"file\", this.file);\n                _context.next = 9;\n                return api.postMultipart(\"/api/file/upload\", formData);\n\n              case 9:\n                upload = _context.sent;\n                if (upload.data.url) this.form.image = upload.data.url;\n\n              case 11:\n                if (this.modalProps && !isNaN(this.modalProps.model)) this.team.products.splice(this.modalProps.model, 1, _objectSpread({}, this.form));else this.team.products.push(this.form);\n                this.updateTeam({\n                  products: this.team.products\n                }).then(function (res) {\n                  return _this.$emit('finish');\n                }).catch(function (err) {\n                  return _this.$emit('finish');\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function submit() {\n        return _submit.apply(this, arguments);\n      };\n    }()\n  }),\n  mounted: function mounted() {\n    if (this.modalProps && !isNaN(this.modalProps.model)) {\n      this.form = _objectSpread({}, this.team.products[this.modalProps.model]);\n    } else this.form = {};\n  }\n};",{"version":3,"sources":["TeamProduct.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,OAAA,GAAA,MAAA,wBAAA;AACA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,QAAA,mBADA;AAEA,SAAA,CAAA,MAAA,EAAA,YAAA,CAFA;AAGA,8BACA,WAAA;AACA,UAAA;AADA,GAAA,CADA,CAHA;AAQA,MARA,kBAQA;AACA,WAAA;AACA,YAAA,KADA;AAEA,YAAA,IAFA;AAGA,YAAA;AAHA,KAAA;AAKA,GAdA;AAeA,6BACA,WAAA;AACA,gBAAA;AADA,GAAA,CADA;AAIA,UAJA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,wBAAA,GAAA,CAAA,YAAA;AACA,oBANA,GAMA,IANA;AAOA,qBAAA,IAAA,GAAA,IAAA;AACA,sBARA,GAQA,IARA;;AAAA,qBAUA,KAAA,IAVA;AAAA;AAAA;AAAA;;AAWA,wBAXA,GAWA,IAAA,QAAA,EAXA;AAYA,yBAAA,MAAA,CAAA,MAAA,EAAA,KAAA,IAAA;AAZA;AAAA,uBAaA,IAAA,aAAA,CAAA,kBAAA,EAAA,QAAA,CAbA;;AAAA;AAaA,sBAbA;AAcA,oBAAA,OAAA,IAAA,CAAA,GAAA,EACA,KAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,GAAA;;AAfA;AAkBA,oBAAA,KAAA,UAAA,IAAA,CAAA,MAAA,KAAA,UAAA,CAAA,KAAA,CAAA,EACA,KAAA,IAAA,CAAA,QAAA,CAAA,MAAA,CAAA,KAAA,UAAA,CAAA,KAAA,EAAA,CAAA,oBAAA,KAAA,IAAA,GADA,KAGA,KAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,IAAA;AAEA,qBAAA,UAAA,CAAA;AAAA,4BAAA,KAAA,IAAA,CAAA;AAAA,iBAAA,EACA,IADA,CACA;AAAA,yBAAA,MAAA,KAAA,CAAA,QAAA,CAAA;AAAA,iBADA,EAEA,KAFA,CAEA;AAAA,yBAAA,MAAA,KAAA,CAAA,QAAA,CAAA;AAAA,iBAFA;;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,IAfA;AA2CA,SA3CA,qBA2CA;AACA,QAAA,KAAA,UAAA,IAAA,CAAA,MAAA,KAAA,UAAA,CAAA,KAAA,CAAA,EACA;AACA,WAAA,IAAA,qBAAA,KAAA,IAAA,CAAA,QAAA,CAAA,KAAA,UAAA,CAAA,KAAA,CAAA;AACA,KAHA,MAKA,KAAA,IAAA,GAAA,EAAA;AACA;AAlDA,CAAA","sourcesContent":["<template>\n  <div>\n    <b-form @submit.prevent=\"submit\">\n      <b-form-group id=\"exampleInputGroup1\"\n                    label=\"Product name:\"\n                    label-for=\"name\">\n        <b-form-input id=\"name\"\n                      type=\"text\"\n                      v-model=\"form.productName\"\n                      placeholder=\"Enter name\"\n                      required>\n        </b-form-input>\n      </b-form-group>\n      <b-form-group id=\"date\"\n                    label=\"Product price\"\n                    label-for=\"date\">\n        <b-form-input id=\"date\"\n                      type=\"number\"\n                      v-model=\"form.price\"\n                      placeholder=\"product price\"\n                      required>\n        </b-form-input>\n      </b-form-group>\n      <b-form-group id=\"link\"\n                    label=\"Product Website\"\n                    label-for=\"link\">\n        <b-form-input id=\"link\"\n                      type=\"url\"\n                      v-model=\"form.buy\"\n                      placeholder=\"product website\"\n                      required>\n        </b-form-input>\n      </b-form-group>\n      <!-- Styled -->\n      <b-form-file v-model=\"file\" :state=\"Boolean(file)\" placeholder=\"Product image\"></b-form-file>\n      <div v-if=\"file\" class=\"mt-3\">Selected file: {{file && file.name}}</div>\n\n      <div style=\"margin-top: 20px; text-align: right\">\n        <div v-if=\"load\" class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n        <b-button type=\"submit\" variant=\"primary\">Update</b-button>\n      </div>\n    </b-form>\n  </div>\n</template>\n\n<script>\nimport api from \"@/services/RestService\"\nimport { mapGetters, mapActions } from \"vuex\";\n\nexport default {\n  name: \"edit-team-product\",\n  props: ['data', 'modalProps'],\n  computed: {\n    ...mapGetters({\n      team: 'team/activeTeam'\n    }),\n  },\n  data() {\n    return {\n      load: false,\n      file: null,\n      form: {}\n    }\n  },\n  methods: {  \n    ...mapActions({\n      updateTeam: 'team/updateTeam'\n    }),\n    async submit() {\n      console.log(\"submitting\");\n      let that = this;\n      that.load = true;\n      var upload = null;\n\n      if(this.file) {\n        let formData = new FormData();\n        formData.append(\"file\", this.file);\n        upload = await api.postMultipart(\"/api/file/upload\", formData );\n        if(upload.data.url)\n          this.form.image = upload.data.url;\n      }\n\n      if(this.modalProps && !isNaN(this.modalProps.model)) \n        this.team.products.splice(this.modalProps.model, 1,{...this.form});\n      else\n      this.team.products.push(this.form);\n\n      this.updateTeam({products: this.team.products})\n        .then(res => this.$emit('finish'))\n        .catch(err => this.$emit('finish'));\n    }\n  },\n    mounted() {\n      if(this.modalProps && !isNaN(this.modalProps.model))\n      {\n        this.form = {...this.team.products[this.modalProps.model]};\n      }\n      else\n        this.form = {}\n    }\n}\n</script>\n\n"],"sourceRoot":"src/components/forms"}]}