{"remainingRequest":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/thread-loader/dist/cjs.js!/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/babel-loader/lib/index.js!/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/vue-flickity/src/flickity.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/vue-flickity/src/flickity.vue","mtime":1560173605759},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/cache-loader/dist/cjs.js","mtime":1560173719903},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/thread-loader/dist/cjs.js","mtime":1560173721326},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/babel-loader/lib/index.js","mtime":1556985451660},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/cache-loader/dist/cjs.js","mtime":1560173719903},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/vue-loader/lib/index.js","mtime":1560173721357}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nimport Flickity from 'flickity';\nexport default {\n  props: {\n    options: Object\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$flickity.destroy();\n    this.$flickity = null;\n  },\n  methods: {\n    /**\n     * Initialize a new flickity and emit init event.\n     */\n    init: function init() {\n      this.$flickity = new Flickity(this.$el, this.options);\n      this.$emit('init', this.$flickity);\n    },\n\n    /**\n     * Return the current flickity instance to access directly\n     *\n     * @return {Flickity}\n     */\n    flickity: function flickity() {\n      return this.$flickity;\n    },\n\n    /**\n     * Selecting Slides\n     */\n\n    /**\n     * Select a slide\n     *\n     * @param {number} index\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    select: function select(index, isWrapped, isInstant) {\n      this.$flickity.select(index, isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the next slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    next: function next(isWrapped, isInstant) {\n      this.$flickity.next(isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the previous slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    previous: function previous(isWrapped, isInstant) {\n      this.$flickity.previous(isWrapped, isInstant);\n    },\n\n    /**\n     * Select a cell\n     *\n     * @param {number} value\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    selectCell: function selectCell(value, isWrapped, isInstant) {\n      this.$flickity.selectCell(value, isWrapped, isInstant);\n    },\n\n    /**\n     * Sizing and Positioning\n     */\n\n    /**\n     * Trigger a resize event\n     */\n    resize: function resize() {\n      this.$flickity.resize();\n    },\n\n    /**\n     * Trigger a reposition event\n     */\n    reposition: function reposition() {\n      this.$flickity.reposition();\n    },\n\n    /**\n     * Adding and removing cells\n     */\n\n    /**\n     * Prepend elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    prepend: function prepend(elements) {\n      this.$flickity.prepend(elements);\n    },\n\n    /**\n     * Append elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    append: function append(elements) {\n      this.$flickity.append(elements);\n    },\n\n    /**\n     * Insert elements at a given index\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     * @param {number} index\n     */\n    insert: function insert(elements, index) {\n      this.$flickity.insert(elements, index);\n    },\n\n    /**\n     * Remove elements from flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    remove: function remove(elements) {\n      this.$flickity.remove(elements);\n    },\n\n    /**\n     * Player\n     */\n\n    /**\n     * Trigger a playPlayer event\n     */\n    playPlayer: function playPlayer() {\n      this.$flickity.playPlayer();\n    },\n\n    /**\n     * Trigger a stopPlayer event\n     */\n    stopPlayer: function stopPlayer() {\n      this.$flickity.stopPlayer();\n    },\n\n    /**\n     * Trigger a pausePlayer event\n     */\n    pausePlayer: function pausePlayer() {\n      this.$flickity.pausePlayer();\n    },\n\n    /**\n     * Trigger a unpausePlayer event\n     */\n    unpausePlayer: function unpausePlayer() {\n      this.$flickity.unpausePlayer();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    rerender: function rerender() {\n      this.$flickity.destroy();\n      this.init();\n    },\n\n    /**\n     * Utilities\n     */\n\n    /**\n     * Destroy the flickity instance\n     */\n    destroy: function destroy() {\n      this.$flickity.destroy();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    reloadCells: function reloadCells() {\n      this.$flickity.reloadCells();\n    },\n\n    /**\n     * Get the cell elements\n     *\n     * @return {array}\n     */\n    getCellElements: function getCellElements() {\n      return this.$flickity.getCellElements();\n    },\n\n    /**\n     * Return flickity data\n     *\n     * @return {Flickity}\n     */\n    data: function data() {\n      return Flickity.data(this.$el);\n    },\n\n    /**\n     * Events\n     */\n\n    /**\n     * Attach an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    on: function on(eventName, listener) {\n      this.$flickity.on(eventName, listener);\n    },\n\n    /**\n     * Remove an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    off: function off(eventName, listener) {\n      this.$flickity.off(eventName, listener);\n    },\n\n    /**\n     * Attach an event once\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    once: function once(eventName, listener) {\n      this.$flickity.once(eventName, listener);\n    },\n\n    /**\n     * Properties\n     */\n\n    /**\n     * Return the selected element\n     *\n     * @return {HTMLElement}\n     */\n    selectedElement: function selectedElement() {\n      return this.$flickity.selectedElement;\n    },\n\n    /**\n     * Return the selected elements\n     *\n     * @return {array}\n     */\n    selectedElements: function selectedElements() {\n      return this.$flickity.selectedElements;\n    },\n\n    /**\n     * Return the selected index\n     *\n     * @return {number}\n     */\n    selectedIndex: function selectedIndex() {\n      return this.$flickity.selectedIndex;\n    },\n\n    /**\n     * Return the cells\n     *\n     * @return {array}\n     */\n    cells: function cells() {\n      return this.$flickity.cells;\n    },\n\n    /**\n     * Return the slides\n     *\n     * @return {array}\n     */\n    slides: function slides() {\n      return this.$flickity.slides;\n    },\n\n    /**\n     * Disable dragging of slider\n     */\n    disableDrag: function disableDrag() {\n      this.$flickity.options.draggable = false;\n      this.$flickity.updateDraggable();\n    },\n\n    /**\n     * Enable dragging of slider\n     */\n    enableDrag: function enableDrag() {\n      this.$flickity.options.draggable = true;\n      this.$flickity.updateDraggable();\n    }\n  }\n};",{"version":3,"sources":["flickity.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <slot/>\n  </div>\n</template>\n\n<script>\nimport Flickity from 'flickity';\n\nexport default {\n  props: {\n    options: Object,\n  },\n\n  mounted() {\n    this.init();\n  },\n\n  beforeDestroy() {\n    this.$flickity.destroy();\n    this.$flickity = null;\n  },\n\n  methods: {\n    /**\n     * Initialize a new flickity and emit init event.\n     */\n    init() {\n      this.$flickity = new Flickity(this.$el, this.options);\n      this.$emit('init', this.$flickity);\n    },\n\n    /**\n     * Return the current flickity instance to access directly\n     *\n     * @return {Flickity}\n     */\n    flickity() {\n      return this.$flickity;\n    },\n\n    /**\n     * Selecting Slides\n     */\n\n    /**\n     * Select a slide\n     *\n     * @param {number} index\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    select(index, isWrapped, isInstant) {\n      this.$flickity.select(index, isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the next slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    next(isWrapped, isInstant) {\n      this.$flickity.next(isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the previous slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    previous(isWrapped, isInstant) {\n      this.$flickity.previous(isWrapped, isInstant);\n    },\n\n    /**\n     * Select a cell\n     *\n     * @param {number} value\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    selectCell(value, isWrapped, isInstant) {\n      this.$flickity.selectCell(value, isWrapped, isInstant);\n    },\n\n    /**\n     * Sizing and Positioning\n     */\n\n    /**\n     * Trigger a resize event\n     */\n    resize() {\n      this.$flickity.resize();\n    },\n\n    /**\n     * Trigger a reposition event\n     */\n    reposition() {\n      this.$flickity.reposition();\n    },\n\n    /**\n     * Adding and removing cells\n     */\n\n    /**\n     * Prepend elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    prepend(elements) {\n      this.$flickity.prepend(elements);\n    },\n\n    /**\n     * Append elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    append(elements) {\n      this.$flickity.append(elements);\n    },\n\n    /**\n     * Insert elements at a given index\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     * @param {number} index\n     */\n    insert(elements, index) {\n      this.$flickity.insert(elements, index);\n    },\n\n    /**\n     * Remove elements from flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    remove(elements) {\n      this.$flickity.remove(elements);\n    },\n\n    /**\n     * Player\n     */\n\n    /**\n     * Trigger a playPlayer event\n     */\n    playPlayer() {\n      this.$flickity.playPlayer();\n    },\n\n    /**\n     * Trigger a stopPlayer event\n     */\n    stopPlayer() {\n      this.$flickity.stopPlayer();\n    },\n\n    /**\n     * Trigger a pausePlayer event\n     */\n    pausePlayer() {\n      this.$flickity.pausePlayer();\n    },\n\n    /**\n     * Trigger a unpausePlayer event\n     */\n    unpausePlayer() {\n      this.$flickity.unpausePlayer();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    rerender() {\n      this.$flickity.destroy();\n      this.init();\n    },\n\n    /**\n     * Utilities\n     */\n\n    /**\n     * Destroy the flickity instance\n     */\n    destroy() {\n      this.$flickity.destroy();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    reloadCells() {\n      this.$flickity.reloadCells();\n    },\n\n    /**\n     * Get the cell elements\n     *\n     * @return {array}\n     */\n    getCellElements() {\n      return this.$flickity.getCellElements();\n    },\n\n    /**\n     * Return flickity data\n     *\n     * @return {Flickity}\n     */\n    data() {\n      return Flickity.data(this.$el);\n    },\n\n    /**\n     * Events\n     */\n\n    /**\n     * Attach an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    on(eventName, listener) {\n      this.$flickity.on(eventName, listener);\n    },\n\n    /**\n     * Remove an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    off(eventName, listener) {\n      this.$flickity.off(eventName, listener);\n    },\n\n    /**\n     * Attach an event once\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    once(eventName, listener) {\n      this.$flickity.once(eventName, listener);\n    },\n\n    /**\n     * Properties\n     */\n\n    /**\n     * Return the selected element\n     *\n     * @return {HTMLElement}\n     */\n    selectedElement() {\n      return this.$flickity.selectedElement;\n    },\n\n    /**\n     * Return the selected elements\n     *\n     * @return {array}\n     */\n    selectedElements() {\n      return this.$flickity.selectedElements;\n    },\n\n    /**\n     * Return the selected index\n     *\n     * @return {number}\n     */\n    selectedIndex() {\n      return this.$flickity.selectedIndex;\n    },\n\n    /**\n     * Return the cells\n     *\n     * @return {array}\n     */\n    cells() {\n      return this.$flickity.cells;\n    },\n\n    /**\n     * Return the slides\n     *\n     * @return {array}\n     */\n    slides() {\n      return this.$flickity.slides;\n    },\n\n    /**\n     * Disable dragging of slider\n     */\n    disableDrag() {\n      this.$flickity.options.draggable = false;\n      this.$flickity.updateDraggable();\n    },\n\n    /**\n     * Enable dragging of slider\n     */\n    enableDrag() {\n      this.$flickity.options.draggable = true;\n      this.$flickity.updateDraggable();\n    },\n  },\n\n};\n</script>\n\n<style src=\"flickity/dist/flickity.css\"></style>\n"],"sourceRoot":"node_modules/vue-flickity/src"}]}