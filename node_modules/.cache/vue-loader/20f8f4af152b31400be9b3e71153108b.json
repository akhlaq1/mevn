{"remainingRequest":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/src/components/Screenshots/ScreenshotsForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/src/components/Screenshots/ScreenshotsForm.vue","mtime":1560173403551},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/babel-loader/lib/index.js","mtime":1556985451660},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/cache-loader/dist/cjs.js","mtime":1560173719903},{"path":"/home/ubuntu/Documents/akhlaq_fiverr/MEVN/cleaned/node_modules/vue-loader/lib/index.js","mtime":1560173721357}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data() {\n    return {\n      form: {\n        caption: '',\n      },\n       \n    }\n    \n  },\n  methods: {\n    onSubmit(evt) {\n      evt.preventDefault()\n      const userStr = JSON.stringify(this.form);\n      alert(JSON.stringify(this.form))\n    },\n    onReset(evt) {\n      evt.preventDefault()\n      /* Reset our form values */\n      this.form.caption = ''\n      /* Trick to reset/clear native browser form validation state */\n      this.show = false\n      this.$nextTick(() => {\n        this.show = true\n      })\n    }\n  }\n}\n",{"version":3,"sources":["ScreenshotsForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ScreenshotsForm.vue","sourceRoot":"src/components/Screenshots","sourcesContent":[" <template>\n  <div class=\"col-md-8 main-content\">\n    <h5 class=\"heading2\">Screenshot Submission</h5> \n     <b-card>\n  <b-form  @submit=\"onSubmit\" @reset=\"onReset\" >\n    <h5>Upload Images</h5>\n    <ValidationProvider name=\"caption\" rules=\"required|min:5|max:50|url\">\n  <div slot-scope=\"{ errors }\">  \n   <b-form-group\n      label=\"Enter a caption for your screenshot\"\n    >\n      <b-form-input v-model=\"form.caption\" trim />\n    </b-form-group>\n        <p>{{ errors[0] }}</p>\n  </div>  \n    </ValidationProvider>\n          <b-form-checkbox name=\"accurate\">The images i've uploaded do not depict nudity/hate speech/offensive material</b-form-checkbox>        \n          <b-form-checkbox name=\"terms\" value=\"that\">I agree to WagerGames Terms and Conditions</b-form-checkbox>   \n       <p style=\"color: red\"> Incorrect entries or entries including profanity/hate speech will be deleted </p>\n\n <b-button block type=\"submit\" variant=\"primary\">Submit</b-button>\n <b-button block type=\"reset\" variant=\"danger\">Reset</b-button>\n  </b-form>\n  </b-card>\n \n  \n\n    </div>\n    </template>\n\n     <script>\n  export default {\n    data() {\n      return {\n        form: {\n          caption: '',\n        },\n         \n      }\n      \n    },\n    methods: {\n      onSubmit(evt) {\n        evt.preventDefault()\n        const userStr = JSON.stringify(this.form);\n        alert(JSON.stringify(this.form))\n      },\n      onReset(evt) {\n        evt.preventDefault()\n        /* Reset our form values */\n        this.form.caption = ''\n        /* Trick to reset/clear native browser form validation state */\n        this.show = false\n        this.$nextTick(() => {\n          this.show = true\n        })\n      }\n    }\n  }\n  </script>"]}]}